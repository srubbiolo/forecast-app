{"version":3,"sources":["components/InputSearch/SearchedElement.jsx","components/InputSearch/InputSearch.jsx","actions/index.js","constants/action-types.js","components/CityMap/CityMap.jsx","components/CityWeather/CityWeather.jsx","pages/HomePage.jsx","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["SearchedElement","removeCityFromPrev","previoslySearched","name","onClick","SEARCH_URI","InputSearch","previousSearches","useSelector","state","allCities","dispatch","useDispatch","useState","isLoading","setIsLoading","toRemove","setToRemove","options","setOptions","useEffect","citySelected","city","selectedCity","undefined","payload","filteredArray","JSON","parse","localStorage","getItem","filter","id","setItem","stringify","type","removeCity","arrayOfCities","findIndex","x","length","splice","unshift","setCity","query","a","fetch","resp","json","cod","opt","Object","useCache","labelKey","minLength","onSearch","placeholder","onChange","selected","renderMenuItemChildren","option","CityMap","lat","lon","zoom","center","lng","googleMapsApiKey","mapContainerStyle","width","height","borderRadius","border","CityWeather","main","sys","labelShort","label","convert","k","scale","selectedScale","setSelectedScale","Container","Row","Col","style","color","fontSize","country","map","el","cursor","key","className","md","lg","ListGroup","variant","Item","xs","Math","trunc","temp","temp_max","temp_min","pressure","humidity","HomePage","getData","coord","Boolean","window","location","hostname","match","initialState","rootReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7c725754.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchedElement = ({ removeCityFromPrev, previoslySearched, name }) => {\r\n\r\n  return (\r\n    <div>\r\n      {previoslySearched && <span onClick={() => removeCityFromPrev()}> &#10006;</span>}\r\n      <span>{name}</span> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchedElement;","import React, { useState, useEffect } from 'react'\r\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setCity, removeCity } from '../../actions/index';\r\nimport  SearchedElement  from './SearchedElement';\r\nconst SEARCH_URI = 'https://api.openweathermap.org/data/2.5/weather';\r\n\r\nconst InputSearch = () => {\r\n  const previousSearches = useSelector(state => state.allCities);\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [toRemove, setToRemove] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    setOptions(previousSearches)\r\n  },[previousSearches])\r\n\r\n  const citySelected = (city) => {\r\n    let selectedCity = city[0];\r\n    if (selectedCity !== undefined) {//library errors / lack of understanding\r\n      //TODO: change this, didn't figure out how to click cross and not execute this onchange, event.preventedefault didn't work :(\r\n      if (toRemove) {\r\n        dispatch(removeCity(selectedCity));\r\n        setToRemove(false);\r\n      } else {\r\n        //Just adding prop previoslySearched for the X appearing purposes\r\n        dispatch(setCity({...selectedCity, previoslySearched: true}));\r\n      }\r\n    }\r\n  }\r\n\r\n  const removeCityFromPrev = () => {\r\n    setToRemove(true)\r\n  }\r\n\r\n  //TODO: do this on back end\r\n  async function handleSearch (query) {\r\n    setIsLoading(true);\r\n    setOptions(previousSearches);\r\n    \r\n    const resp = await fetch(`${SEARCH_URI}?q=${query}&appid=c0b02444709c5dc54be09a20371ca397`);\r\n    const json = await resp.json();\r\n    \r\n    let opt;\r\n    if (json.cod !== \"404\") {\r\n      if (previousSearches.findIndex(x => x.id === json.id) < 0) {\r\n        opt = [...previousSearches, {...json}];\r\n      } else {\r\n        opt = [...previousSearches]\r\n      }\r\n\r\n      setOptions(opt);\r\n    } else {\r\n      opt = [...previousSearches]\r\n      setOptions(opt);\r\n    }\r\n    setIsLoading(typeof json === Object);\r\n\r\n  };\r\n\r\n  return (\r\n    <AsyncTypeahead\r\n      id=\"async-input\"\r\n      isLoading={isLoading}\r\n      useCache={false}\r\n      labelKey=\"name\"\r\n      minLength={0}\r\n      onSearch={handleSearch}\r\n      options={options}\r\n      placeholder=\"Search for a city...\"\r\n      onChange={ (selected) => citySelected(selected) }\r\n      renderMenuItemChildren={option => (\r\n        <SearchedElement\r\n          removeCityFromPrev={removeCityFromPrev}\r\n          {...option} />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nexport default InputSearch;","import { \r\n  DATA_LOADED,\r\n  SET_CITY,\r\n  SESSION_STORAGE_CODE,\r\n  REMOVE_CITY } from '../constants/action-types';\r\n\r\nexport function setCity(payload) {\r\n\r\n  //Get existing string from localStorage and converting string to object\r\n  let arrayOfCities = JSON.parse( localStorage.getItem(SESSION_STORAGE_CODE) );\r\n\r\n  //Don't re add the city in case its on the array already\r\n  if (arrayOfCities.findIndex(x => x.id === payload.id) < 0) {\r\n\r\n    //limit max of 5 saved at local storage\r\n    if (arrayOfCities.length > 4) {\r\n      arrayOfCities.splice(0, 1, payload)\r\n    } else {\r\n      arrayOfCities.unshift(payload);\r\n    }\r\n  }\r\n\r\n  localStorage.setItem(SESSION_STORAGE_CODE, JSON.stringify(arrayOfCities) );\r\n  return { type: SET_CITY, arrayOfCities, payload }\r\n}\r\n\r\nexport function removeCity(payload) {\r\n  let arrayOfCities = JSON.parse( localStorage.getItem(SESSION_STORAGE_CODE) );\r\n  let filteredArray = arrayOfCities.filter( city => {\r\n    return city.id !== payload.id;\r\n  })\r\n\r\n  localStorage.setItem(SESSION_STORAGE_CODE, JSON.stringify(filteredArray) );\r\n  return { type: REMOVE_CITY, filteredArray }\r\n}\r\n\r\nexport function getData() {\r\n  if (localStorage.getItem(SESSION_STORAGE_CODE) === null) {\r\n    let arr = [];\r\n    localStorage.setItem(SESSION_STORAGE_CODE, JSON.stringify(arr));\r\n  }\r\n  return { type: DATA_LOADED, payload: JSON.parse( localStorage.getItem(SESSION_STORAGE_CODE) ) };\r\n}","export const DATA_LOADED = 'DATA_LOADED';\r\nexport const SESSION_STORAGE_CODE = 'listOf5Cities'\r\nexport const SET_CITY = 'SET_CITY';\r\nexport const REMOVE_CITY = 'REMOVE_CITY';","import React from 'react';\r\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\r\n\r\nconst CityMap = ({ lat, lon, zoom }) => {\r\n  const center = {\r\n    //fallback Pipa just in case\r\n    lat: lat || -6.22758,\r\n    lng: lon || -35.0476\r\n  };\r\n\r\n  const containerStyle = {\r\n    width: '400px',\r\n    height: '300px',\r\n    borderRadius: '5px',\r\n    border: '2px solid grey'\r\n  };\r\n\r\n  return (\r\n    <LoadScript\r\n        googleMapsApiKey=\"AIzaSyD_ZoTCvqf-K0XnkGS19ngGeJKkZL4isAM\"\r\n      >\r\n        <GoogleMap\r\n          mapContainerStyle={containerStyle}\r\n          center={center}\r\n          zoom={zoom}\r\n        >\r\n        </GoogleMap>\r\n    </LoadScript>\r\n  )\r\n}\r\n\r\nexport default CityMap;","import React, { useState } from 'react';\r\nimport { Container, Row, Col, ListGroup  } from 'react-bootstrap';\r\n\r\nconst CityWeather = ( { name, main, sys}) => {\r\n\r\n  const [scale] = useState(\r\n    [\r\n      {\r\n        id: 0,\r\n        labelShort: 'ºC',\r\n        label: 'Celsius',\r\n        convert: (k) => k - 273.15\r\n      },\r\n      {\r\n        id: 1,\r\n        labelShort: 'ºF',\r\n        label: 'Farenheit',\r\n        convert: (k) => ( k * (9/5) ) - 459.67\r\n      },\r\n      {\r\n        id: 2,\r\n        labelShort: 'K',\r\n        label: 'Kelvin',\r\n        convert: (k) => k\r\n      }\r\n    ]\r\n  )\r\n\r\n  const [selectedScale, setSelectedScale] = useState(0);\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <label style={{color: \"grey\"}}>Today in: </label>\r\n          <span style={{fontSize: \"22px\"}}>{` ${name}, ${sys.country}` }</span> \r\n        </Col>\r\n\r\n        <Col>\r\n        <label style={{color: \"grey\"}}>Show information in:   </label>\r\n          {/* {`Show information in:  `} */}\r\n          {scale.map( el =>  <span \r\n                                style={{color: \"#007bff\", cursor: \"pointer\"}}\r\n                                key={el.id}\r\n                                onClick={() => setSelectedScale(el.id)}> {el.label}\r\n                              </span>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row className=\"justify-content-md-center mt-3\">\r\n        <Col md lg=\"6\">\r\n        <ListGroup variant=\"flush\" style={{borderRadius: \"8px\"}}>\r\n          <ListGroup.Item>\r\n            <Row>\r\n              <Col Col xs lg=\"6\">Temperature:</Col>\r\n              <Col Col xs lg=\"4\">{Math.trunc( scale[selectedScale].convert(main.temp) )} {scale[selectedScale].labelShort}</Col>\r\n            </Row>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <Row>\r\n              <Col Col xs lg=\"6\">Max temperature:</Col>\r\n              <Col Col xs lg=\"4\">{Math.trunc( scale[selectedScale].convert(main.temp_max) )} {scale[selectedScale].labelShort}</Col>\r\n            </Row>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <Row>\r\n              <Col Col xs lg=\"6\">Min temperature:</Col>\r\n              <Col Col xs lg=\"4\">{Math.trunc( scale[selectedScale].convert(main.temp_min) )} {scale[selectedScale].labelShort}</Col>\r\n            </Row>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <Row>\r\n              <Col Col xs lg=\"6\">Pressure:</Col>\r\n              <Col Col xs lg=\"4\">{main.pressure} hPa</Col>\r\n            </Row>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <Row>\r\n              <Col Col xs lg=\"6\">Humidity:</Col>\r\n              <Col Col xs lg=\"4\">{main.humidity} %</Col>\r\n            </Row>\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row>\r\n        <Col>\r\n        \r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default CityWeather;","import React, { useEffect} from 'react';\r\nimport InputSearch from '../components/InputSearch/InputSearch';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { getData } from '../actions/index';\r\nimport CityMap from '../components/CityMap/CityMap';\r\nimport CityWeather from '../components/CityWeather/CityWeather';\r\n\r\nconst HomePage = () => {\r\n  const selectedCity = useSelector(state => state.selectedCity);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getData());\r\n  })\r\n\r\n  \r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-md-center\">\r\n        <Col md lg=\"6\">\r\n          <h1>Weather Challenge App</h1>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"justify-content-md-center mb-5\">\r\n        <Col md lg=\"6\">\r\n          <InputSearch /> \r\n        </Col>\r\n      </Row>\r\n        \r\n      <Row className=\"justify-content-md-center\">\r\n        <Col xs=\"12\" lg=\"8\">\r\n          {selectedCity.name && <CityWeather {...selectedCity} /> }\r\n        </Col>\r\n          <Col xs=\"12\" lg=\"4\" className=\"justify-content-md-center mt-4\">\r\n            {selectedCity.coord && <CityMap {...selectedCity.coord } zoom={11} />}\r\n          </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default HomePage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {DATA_LOADED, SET_CITY, REMOVE_CITY} from \"../constants/action-types\";\r\n\r\nconst initialState = {\r\n    allCities: [],\r\n    selectedCity: {}\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n    if (action.type === SET_CITY) {\r\n        return {...state, selectedCity: {...action.payload}, allCities: [...action.arrayOfCities]}\r\n    }\r\n\r\n    if (action.type === REMOVE_CITY) {\r\n        return {...state, allCities: [...action.filteredArray]}\r\n    }\r\n\r\n    if (action.type === DATA_LOADED) {\r\n        return {...state, allCities:[ ...action.payload]}\r\n    }\r\n    \r\n    return state;\r\n};\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunk)\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HomePage from '../src/pages/HomePage';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport { Provider } from \"react-redux\";\nimport store from './store/index';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HomePage />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}